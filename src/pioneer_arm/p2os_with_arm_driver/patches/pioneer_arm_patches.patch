Index: include/p2os_driver/p2os.h
===================================================================
--- include/p2os_driver/p2os.h	(revision 163)
+++ include/p2os_driver/p2os.h	(working copy)
@@ -35,6 +35,8 @@
 #include "ros/ros.h"
 #include "nav_msgs/Odometry.h"
 #include "geometry_msgs/Twist.h"
+#include <sensor_msgs/JointState.h>
+#include <std_srvs/Empty.h>
 #include <tf/transform_broadcaster.h>
 #include <p2os_driver/BatteryState.h>
 #include <p2os_driver/MotorState.h>
@@ -112,6 +114,13 @@
 		void check_voltage( diagnostic_updater::DiagnosticStatusWrapper &stat );
 		void check_stall( diagnostic_updater::DiagnosticStatusWrapper &stat );
 
+    void arm_initialize();
+    void publish_arm_state(ros::Time ts);
+    void check_and_set_arm_state();
+    void arm_cmd_callback(const sensor_msgs::JointState::ConstPtr& msg);
+    bool arm_home_callback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res);
+    bool arm_stop_callback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res);
+
   protected:
     ros::NodeHandle n;
     ros::NodeHandle nh_private;
@@ -120,8 +129,9 @@
 
     diagnostic_updater::DiagnosedPublisher<p2os_driver::BatteryState> batt_pub_;
     ros::Publisher pose_pub_, mstate_pub_, grip_state_pub_,
-      ptz_state_pub_, sonar_pub_, aio_pub_, dio_pub_;
-    ros::Subscriber cmdvel_sub_, cmdmstate_sub_, gripper_sub_, ptz_cmd_sub_;
+      ptz_state_pub_, sonar_pub_, aio_pub_, dio_pub_, arm_state_pub_;
+    ros::Subscriber cmdvel_sub_, cmdmstate_sub_, gripper_sub_, ptz_cmd_sub_, arm_cmd_sub_;
+    ros::ServiceServer arm_home_srv_, arm_stop_srv_;
 
     tf::TransformBroadcaster odom_broadcaster;
     ros::Time veltime;
@@ -134,6 +144,7 @@
     int         psos_tcp_port;
     bool        vel_dirty, motor_dirty;
     bool        gripper_dirty_;
+    bool        arm_dirty_;
     int         param_idx;
     // PID settings
     int rot_kp, rot_kv, rot_ki, trans_kp, trans_kv, trans_ki;
@@ -151,6 +162,8 @@
     double desired_freq;
     double lastPulseTime; // Last time of sending a pulse or command to the robot
     bool use_sonar_;
+    bool use_arm_;
+    bool arm_initialized_;
 
     P2OSPtz ptz_;
 
@@ -158,6 +171,8 @@
     geometry_msgs::Twist cmdvel_;
     p2os_driver::MotorState    cmdmotor_state_;
     p2os_driver::GripperState gripper_state_;
+    sensor_msgs::JointState arm_state_;
+    sensor_msgs::JointState arm_cmd_;
     ros_p2os_data_t p2os_data;
 };
 
Index: manifest.xml
===================================================================
--- manifest.xml	(revision 163)
+++ manifest.xml	(working copy)
@@ -9,8 +9,11 @@
   <depend package="roscpp"/>
   <depend package="std_msgs"/>
   <depend package="nav_msgs"/>
+  <depend package="sensor_msgs"/>
+  <depend package="std_srvs"/>
   <depend package="tf"/>
   <depend package="diagnostic_updater"/>
+  <depend package="angles"/>
   <export>
     <cpp cflags="-I${prefix}/include -I${prefix}/msg/cpp"/>
   </export>
Index: src/sip.cc
===================================================================
--- src/sip.cc	(revision 163)
+++ src/sip.cc	(working copy)
@@ -29,7 +29,7 @@
 #include <stdlib.h> /* for abs() */
 #include <unistd.h>
 
-#include <p2os_driver/sip.h>
+#include "../include/p2os_driver/sip.h"
 #include "tf/tf.h"
 #include "tf/transform_datatypes.h"
 #include <sstream>
Index: src/p2os.cc
===================================================================
--- src/p2os.cc	(revision 163)
+++ src/p2os.cc	(working copy)
@@ -22,7 +22,8 @@
  */
 
 #include <ros/ros.h>
-#include <p2os_driver/p2os.h>
+#include <angles/angles.h>
+#include "../include/p2os_driver/p2os.h"
 
 #include <termios.h>
 #include <fcntl.h>
@@ -30,16 +31,18 @@
 
 
 P2OSNode::P2OSNode( ros::NodeHandle nh ) :
-    n(nh), gripper_dirty_(false),
+    n(nh),
     batt_pub_( n.advertise<p2os_driver::BatteryState>("battery_state",1000),
                diagnostic_,
                diagnostic_updater::FrequencyStatusParam( &desired_freq, &desired_freq, 0.1),
                diagnostic_updater::TimeStampStatusParam() ),
+    gripper_dirty_(false), arm_dirty_(false), arm_initialized_(false),
     ptz_(this)
 {
   // Use sonar
   ros::NodeHandle n_private("~");
   n_private.param("use_sonar", use_sonar_, false);
+  n_private.param("use_arm", use_arm_, false);
 
   // read in config options
   // bumpstall
@@ -269,6 +272,218 @@
   gripper_state_ = *msg;
 }
 
+void P2OSNode::arm_initialize()
+{
+  ROS_DEBUG("Arm Version: %s", sippacket->armVersionString);
+  if(!strstr(sippacket->armVersionString, "No arm"))
+  {
+    if(use_arm_ && !arm_initialized_)
+    {
+      ROS_DEBUG("ARMINFOPAC received. Turning arm power on.");
+
+      unsigned char command[4];
+      P2OSPacket packet;
+
+      // Turn on arm power
+      command[0] = ARM_POWER;
+      command[1] = ARGINT;
+      command[2] = 1;
+      command[3] = 0;
+      packet.Build (command, 4);
+      SendReceive (&packet, false);
+
+      // Configure P2OS to stream ARMPAC (joint state) messages
+      command[0] = ARM_STATUS;
+      command[1] = ARGINT;
+      command[2] = 2;
+      command[3] = 0;
+      packet.Build (command, 4);
+      SendReceive (&packet,false);
+
+      // Resize Joint State message to hold the proper number of joints
+      unsigned int joint_count = (unsigned int)sippacket->armNumJoints;
+      arm_state_.name.resize(joint_count);
+      arm_state_.position.resize(joint_count);
+      arm_state_.velocity.resize(joint_count);
+      arm_state_.effort.resize(joint_count);
+      arm_cmd_.name.resize(joint_count);
+      arm_cmd_.position.resize(joint_count);
+      arm_cmd_.velocity.resize(joint_count);
+      arm_cmd_.effort.resize(joint_count);
+
+      // Set fixed, per-joint information
+      std::stringstream ss;
+      for(unsigned int i = 0; i < joint_count; ++i)
+      {
+        ss.str("");
+        ss << i;
+
+        arm_state_.name[i] = "Joint" + ss.str();
+        arm_cmd_.name[i] = "Joint" + ss.str();
+      }
+
+      // subscribe to arm commands
+      arm_cmd_sub_ = n.subscribe("command", 1, &P2OSNode::arm_cmd_callback, this);
+
+      // advertise arm state
+      arm_state_pub_ = n.advertise<sensor_msgs::JointState>("joint_states", 1);
+
+      // advertise arm services
+      arm_home_srv_ = n.advertiseService("home", &P2OSNode::arm_home_callback, this);
+
+      // advertise arm services
+      arm_stop_srv_ = n.advertiseService("stop", &P2OSNode::arm_stop_callback, this);
+
+      // Mark as initialized
+      arm_initialized_ = true;
+    }
+  }
+}
+
+void P2OSNode::publish_arm_state(ros::Time ts)
+{
+  if(arm_initialized_)
+  {
+    // The JointState message should be properly sized already
+    assert(arm_state_.name.size() == sippacket->armNumJoints);
+    assert(arm_state_.position.size() == sippacket->armNumJoints);
+    assert(arm_state_.velocity.size() == sippacket->armNumJoints);
+    assert(arm_state_.effort.size() == sippacket->armNumJoints);
+
+    // Update SIP positions. (Don't know why, simply keeping with the PLAYER driver)
+    for (int ii = 0; ii < 6; ii++)
+    {
+      sippacket->armJointPosRads[ii] = TicksToRadians (ii, sippacket->armJointPos[ii]);
+    }
+
+    // Fill in header timestamp
+    arm_state_.header.stamp = ts;
+
+    // Fill in the joint positions. No other information is available
+    for (int i = 0; i < sippacket->armNumJoints; i++)
+    {
+      arm_state_.position[i] = TicksToRadians(i, sippacket->armJointPos[i]);
+      // Slightly fake the velocity information. If the joint is moving, assume its moving at the configured velocity
+      if(sippacket->armJointMoving[i])
+      {
+        arm_state_.velocity[i] = SecsPerTicktoRadsPerSec(i, sippacket->armJoints[i].speed);
+      }
+      else
+      {
+        arm_state_.velocity[i] = 0.0;
+      }
+      // No "effort" information is available. PLAYER P2OS driver set effort to -1, and so will I
+      arm_state_.effort[i] = -1;
+    }
+
+    // Publish
+    arm_state_pub_.publish(arm_state_);
+  }
+}
+
+void P2OSNode::check_and_set_arm_state()
+{
+  if( !arm_dirty_ ) return;
+
+  unsigned char command[4];
+  P2OSPacket packet;
+
+  // convert JointState data into joint commands
+  for(unsigned char i = 0; i < sippacket->armNumJoints; ++i)
+  {
+    // Calculate joint settings
+    char speed = RadsPerSectoSecsPerTick(i, arm_cmd_.velocity[i]);
+    unsigned char position = RadiansToTicks(i, arm_cmd_.position[i]);
+
+    // Set the Joint Speed, if different
+    if((arm_cmd_.velocity[i] > 0) && (speed != sippacket->armJoints[i].speed))
+    {
+      command[0] = ARM_SPEED;
+      command[1] = ARGINT;
+      command[2] = speed;
+      command[3] = i + 1;
+      packet.Build(command, 4);
+      SendReceive(&packet);
+      sippacket->armJoints[i].speed = speed;
+    }
+
+    if(position != sippacket->armJointTargetPos[i])
+    {
+      command[0] = ARM_POS;
+      command[1] = ARGINT;
+      command[2] = position;
+      command[3] = i + 1;
+      packet.Build(command, 4);
+      SendReceive(&packet);
+      sippacket->armJointTargetPos[i] = position;
+    }
+  }
+
+  arm_dirty_ = false;
+}
+
+void P2OSNode::arm_cmd_callback(const sensor_msgs::JointState::ConstPtr& msg)
+{
+  if(arm_initialized_)
+  {
+
+    // Map between the JointState command message joint indices and the class joint indices
+    // The internal command information will be updated with information from any matching joints
+    for(unsigned int i = 0; i < this->arm_cmd_.name.size(); ++i)
+    {
+      for(unsigned int j = 0; j < msg->name.size(); ++j)
+      {
+        if(this->arm_cmd_.name[i] == msg->name[j])
+        {
+          this->arm_cmd_.position[i] = msg->position[j];
+          this->arm_cmd_.velocity[i] = msg->velocity[j];
+          this->arm_cmd_.effort[i] = msg->effort[j];
+          this->arm_cmd_.header = msg->header;
+          this->arm_dirty_ = true;
+          break;
+        }
+      }
+    }
+
+  }
+}
+
+bool P2OSNode::arm_home_callback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res)
+{
+  if(arm_initialized_)
+  {
+    // Send all joints home
+    unsigned char command[4];
+    P2OSPacket packet;
+    command[0] = ARM_HOME;
+    command[1] = ARGINT;
+    command[2] = (unsigned char)255;
+    command[3] = 0;
+    packet.Build(command, 4);
+    SendReceive(&packet);
+  }
+
+  return true;
+}
+
+bool P2OSNode::arm_stop_callback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res)
+{
+  if(arm_initialized_)
+  {
+    // Send all joints home
+    unsigned char command[4];
+    P2OSPacket packet;
+    command[0] = ARM_STOP;
+    command[1] = ARGINT;
+    command[2] = (unsigned char)255;
+    command[3] = 0;
+    packet.Build(command, 4);
+    SendReceive(&packet);
+  }
+
+  return true;
+}
+
 int
 P2OSNode::Setup()
 {
@@ -651,6 +866,16 @@
   }
   ptz_.setup();
 
+  if(use_arm_)
+  {
+    // Request ArmInfo Packet to verify the arm exists/get arm properties
+    P2OSPacket packet;
+    unsigned char command[4];
+    command[0] = ARM_INFO;
+    packet.Build (command, 1);
+    SendReceive (&packet,false);
+    ROS_DEBUG("Arm Interface enabled. Requesting ARMINFOPAC.");
+  }
   return(0);
 }
 
@@ -718,7 +943,6 @@
 
   // put bumper data
   // put compass data
-
 }
 
 /* send the packet, then receive and parse an SIP */
@@ -773,6 +997,20 @@
         }
       }
     }
+    else if(packet.packet[0] == 0xFA && packet.packet[1] == 0xFB && packet.packet[3] == ARMPAC)
+    {
+      this->sippacket->ParseArm(&packet.packet[2]);
+
+      if(publish_data)
+      {
+        publish_arm_state(packet.timestamp);
+      }
+    }
+    else if(packet.packet[0] == 0xFA && packet.packet[1] == 0xFB && packet.packet[3] == ARMINFOPAC)
+    {
+      this->sippacket->ParseArmInfo(&packet.packet[2]);
+      arm_initialize();
+    }
     else
     {
       ROS_ERROR("Received other packet!");
Index: src/p2osnode.cc
===================================================================
--- src/p2osnode.cc	(revision 163)
+++ src/p2osnode.cc	(working copy)
@@ -24,11 +24,7 @@
 #include <iostream>
 
 #include "ros/ros.h"
-#include "geometry_msgs/Pose.h"
-#include "geometry_msgs/PoseStamped.h"
-#include <p2os_driver/MotorState.h>
-#include "tf/transform_datatypes.h"
-#include <p2os_driver/p2os.h>
+#include "../include/p2os_driver/p2os.h"
 
 int main( int argc, char** argv )
 {
@@ -52,6 +48,7 @@
     p->check_and_set_vel();
     p->check_and_set_motor_state();
     p->check_and_set_gripper_state();
+    p->check_and_set_arm_state();
 
     if( p->get_pulse() > 0 )
     {
