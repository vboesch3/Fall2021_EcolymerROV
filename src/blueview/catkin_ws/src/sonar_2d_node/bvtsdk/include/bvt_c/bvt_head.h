/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTHEAD_H__
#define __BVTHEAD_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_ping.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	define BVTSDK_EXPORT
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTHead BVTHead Object
 * A head consists of a group of co-planar transducers which are
 * operated simultaneously to produce (ultimately) a single 2d
 * image.  The Head object provides functions to change the 
 * range window as well as produce pings.
 * @{
*/

/** Opaque type for the BVTHead object */
typedef void* BVTHead;

/** Retrieves a copy of a the name of the head. The head name is currently
 * set only at the factory, and is simply "Head" on many sonars. Only special
 * order sonars with multiple heads are likely to have a different name.<br>
 * The length of the name has no actual limit, though 80 characters
 * would seem to be more than enough.
 * \param obj Object pointer
 * \param buffer buffer to hold the null-terminated string to be passed back 
 * \param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTHead_GetHeadName(BVTHead obj, char* buffer, int buffer_size);

/** Set the range to be acquired.
 * \param obj Object pointer
 * \param start Start range in meters 
 * \param stop Stop range in meters 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRange(BVTHead obj, float start, float stop);

/** Retrieve the current starting range in meters
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetStartRange(BVTHead obj);

/** Retrieve the current stopping range in meters.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetStopRange(BVTHead obj);

/** Return the minimum allowable range for this sonar
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetMinimumRange(BVTHead obj);

/** Return the maximum allowable range for this sonar
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetMaximumRange(BVTHead obj);

#define BVTHEAD_FLUID_SALTWATER	(int)(0)

#define BVTHEAD_FLUID_FRESHWATER	(int)(1)

#define BVTHEAD_FLUID_OTHER	(int)(2)

/** Return the type of water the head is in.  The returned value will correspond to 
 * one of the FLUID_* constants.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetFluidType(BVTHead obj);

/** Set the type of water the head is in
 * \param obj Object pointer
 * \param fluid The fluid type (one of the FLUID_* constants) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetFluidType(BVTHead obj, int fluid);

/** Return the speed of sound in water
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetSoundSpeed(BVTHead obj);

/** Set the speed of sound in water
 * \param obj Object pointer
 * \param speed Sound speed in water 
 */
BVTSDK_EXPORT RetVal BVTHead_SetSoundSpeed(BVTHead obj, int speed);

/** Return the additional analog gain in dB
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetGainAdjustment(BVTHead obj);

/** Set the additional analog gain. Note: Some systems don't
 * support gain adjustment.
 * \param obj Object pointer
 * \param gain Additional analog gain in dB 
 */
BVTSDK_EXPORT RetVal BVTHead_SetGainAdjustment(BVTHead obj, float gain);

/** Return the time variable gain in dB/meter
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetTVGSlope(BVTHead obj);

/** Set the  time variable analog gain. Note: Some systems 
 * don't support TVG
 * \param obj Object pointer
 * \param tvg Time variable gain in dB/meter 
 */
BVTSDK_EXPORT RetVal BVTHead_SetTVGSlope(BVTHead obj, float tvg);

/** Return the center frequency(in Hz) of this head.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetCenterFreq(BVTHead obj);

/** Return the number of pings 'in' this head
 * A head attached to a file might have more than one ping recorded.  However, a networked sonar
 * will only have a single ping.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetPingCount(BVTHead obj);

/** Retrieve a Ping from the Head
 * If ping_num is less than 0, return the next ping in the file. Otherwise, load the specified ping.  
 * If the Head is attached to a 'live' sonar (network), then GetPing always acquires a new ping.
 * \param obj Object pointer
 * \param ping_num The ping number to return 
 * \param ping The returned Ping object
 */
BVTSDK_EXPORT RetVal BVTHead_GetPing(BVTHead obj, int ping_num, BVTPing* ping);

/** Write a ping to a file.
 * \param obj Object pointer
 * \param ping The ping to write out 
 */
BVTSDK_EXPORT RetVal BVTHead_PutPing(BVTHead obj, const BVTPing ping);

/** Turn off image processing	
 */
#define BVTHEAD_RES_OFF	(int)(0)

/** Process at low resolution 
 */
#define BVTHEAD_RES_LOW	(int)(1)

/** Process at med resolution 
 */
#define BVTHEAD_RES_MED	(int)(2)

/** Process at high resolution 
 */
#define BVTHEAD_RES_HIGH	(int)(3)

/** Select a good res for the current range automatically 
 */
#define BVTHEAD_RES_AUTO	(int)(4)

/** Set the image processing resolution. The RES_AUTO setting is highly
 * recommended, as it adapts via a formula according to the stop range,
 * whereas the other ranges are fixed values, and should only be used
 * in specialized cases, such as requesting high resolution for longer
 * distances (which will increase the processing time required to 
 * create the image). R-Theta images may use either this funtion or
 * SetRangeResolution(), depending on the degree of control required.
 * \param obj Object pointer
 * \param res Resolution constant (RES_*)
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageRes(BVTHead obj, int res);

/** Requests a range resolution for R-Theta images. Also affects the
 * range resolution for RangeData. Note that the exact range resolution
 * may not be available, and the closest resolution will be set. The
 * actual resolution can be obtained by querying the returned image
 * or RangeData object.
 * \param obj Object pointer
 * \param resolution_in_meters Range resolution, in meters 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRangeResolution(BVTHead obj, float resolution_in_meters);

/** Set the requested out image size
 * The processing code will attempt to process images at the specified size.
 * However, it doesn't guarantee that the final output will match this size.
 * NOTE: For R-Theta images, only the width is used, and the image will
 * be created with that exact width. Height will depend on the range,
 * and the resolution set. (See SetImageRes() and SetRangeResolution())
 * \param obj Object pointer
 * \param height The requested height 
 * \param width The requested width 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageReqSize(BVTHead obj, int height, int width);

/** NOTE: this option is only valid for some sonars, in specific circumstances,
 * and should only be used on advice from the factory. <br>
 * By default, beamforming is done on the local system.  If you call this
 * function with enable=true, the SDK will request that the remote sonar
 * handle the majority of the beamforming. This operation applies the next 
 * time GetPing is called. <br>
 * \param obj Object pointer
 * \param enable Enable/Disable remote beamformer. (using 1 or 0 to enable or disable) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRemoteBeamForming(BVTHead obj, int enable);

/** NOTE: this option is only valid for some sonars, in specific circumstances,
 * and should only be used on advice from the factory. <br>
 * By default, the sonar sends data suitable for saving to a .son file.  If you 
 * are not saving files, AND are recieving processed data thru setting one of
 * the other options, you can call this function with enable=false to reduce the 
 * amount of network bandwidth needed. . This operation applies the next time GetPing 
 * is called.
 * \param obj Object pointer
 * \param enable Enable/Disable raw ping data. (using 1 or 0 to enable or disable) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRawDataSending(BVTHead obj, int enable);

/** NOTE: this option is only valid for some sonars, in specific circumstances,
 * and should only be used on advice from the factory. <br>
 * By default, image forming is done on the local system. 
 * If you call this function with en=true, the SDK will request that
 * the remote sonar handle the image forming. This option is slightly
 * different than remote beam-forming, with all processing done on
 * the sonar, and only the complete image sent over the network connection.
 * This operation applies the next time GetPing is called. <br>
 * \param obj Object pointer
 * \param enable Enable/Disable remote image forming. (using 1 or 0 to enable or disable) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRemoteImageForming(BVTHead obj, int enable);

/** Output a cartesian image 
 */
#define BVTHEAD_IMAGE_XY	(int)(0)

/** Output a Range/Theta image 
 */
#define BVTHEAD_IMAGE_RTHETA	(int)(1)

/** Set the type of image output.
 * NOTE: See SetImageReqSize() for important issues regarding image size.
 * \param obj Object pointer
 * \param type Image type constant (IMAGE_*) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageType(BVTHead obj, int type);

/** Return the filter flags.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetImageFilterFlags(BVTHead obj);

/** Set the filter flags.
 * \param obj Object pointer
 * \param flags Image filter flags (bit field) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageFilterFlags(BVTHead obj, int flags);

/** ** EXPERIMENTAL **  Sets the intensity value below which data is
 * considered to be noise. Values above this threshold are included in
 * the algorithm which attempts to determine the target edge. This is
 * NOT a simple threshold above which the first value encountered is
 * considered the target edge. This is the same intensity value returned
 * in a MagImage, with a range of an unsigned 16-bit integer.
 * If not set, the default is currently set to 1000. <br>
 * NOTE: This only applies to specialized BlueView sonars.
 * \param obj Object pointer
 * \param noise_threshold Threshold below which is considered noise 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRangeDataThreshold(BVTHead obj, unsigned short noise_threshold);

/** By default, the sonar transmits pings.  This function allows the user to 
 * disable transmit.  This can be useful to get background noise measurements.
 * Note that this is not implemented on all sonars.
 * \param obj Object pointer
 * \param enableTx If 0, disable the sonar transmission of pings.
 */
BVTSDK_EXPORT RetVal BVTHead_SetTxEnable(BVTHead obj, int enableTx);

/** ** Preliminary support - may change in later SDK versions ** <br>
 * Position of the sonar positioner relative to the boat.
 * \param obj Object pointer
 * \param X_axis_degrees rotation about X axis 
 * \param Y_axis_degrees rotation about Y axis 
 * \param Z_axis_degrees rotation about Z axis 
 */
BVTSDK_EXPORT RetVal BVTHead_GetMountingOrientation(BVTHead obj, double* X_axis_degrees, double* Y_axis_degrees, double* Z_axis_degrees);

/** ** Preliminary support - may change in later SDK versions ** <br>
 * Position of the sonar positioner relative to the boat.
 * \param obj Object pointer
 * \param X_axis_degrees rotation about X axis 
 * \param Y_axis_degrees rotation about Y axis 
 * \param Z_axis_degrees rotation about Z axis 
 */
BVTSDK_EXPORT RetVal BVTHead_SetMountingOrientation(BVTHead obj, double X_axis_degrees, double Y_axis_degrees, double Z_axis_degrees);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
