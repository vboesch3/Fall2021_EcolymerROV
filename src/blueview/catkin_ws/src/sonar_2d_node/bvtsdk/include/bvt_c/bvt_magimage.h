/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTMAGIMAGE_H__
#define __BVTMAGIMAGE_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	define BVTSDK_EXPORT
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTMagImage BVTMagImage Object
 * MagImage is short for MagnitudeImage.  It provides access to a 2d 
 * image where each pixel is intensity of the return from a particular
 * point on a plane emanating from the head.  It can be thought of as 
 * a 16bit grey-scale image.
 * @{
*/

/** Opaque type for the BVTMagImage object */
typedef void* BVTMagImage;

/** Destroy a BVTMagImage object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTMagImage_Destroy(BVTMagImage obj);

/** Return the height (in pixels) of this image
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTMagImage_GetHeight(BVTMagImage obj);

/** Return the width (in pixels) of this image
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTMagImage_GetWidth(BVTMagImage obj);

/** Return the range resolution of this image.
 * The resolution is returned in meters per pixel.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTMagImage_GetRangeResolution(BVTMagImage obj);

/** Only valid for R-Theta images.
 * Returns the bearing resolution, in degrees per column.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTMagImage_GetBearingResolution(BVTMagImage obj);

/** Retrieve the image row of the origin.
 * In most cases the origin will be outside of the image boundaries.  The origin is the 'location' 
 * (in pixels) of the sonar head in image plane
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTMagImage_GetOriginRow(BVTMagImage obj);

/** Retrieve the image column of the origin.
 * In most cases the origin will be outside of the image boundaries.  The origin is the 'location' 
 * (in pixels) of the sonar head in image plane
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTMagImage_GetOriginCol(BVTMagImage obj);

/** Retrieve the range (from the sonar head) of the specified pixel
 * \param obj Object pointer
 * \param row Origin row 
 * \param col Origin col 
 */
BVTSDK_EXPORT double BVTMagImage_GetPixelRange(BVTMagImage obj, int row, int col);

/** Retrieve the bearing relative to the sonar head of the specified pixel
 * \param obj Object pointer
 * \param row Origin row 
 * \param col Origin col 
 */
BVTSDK_EXPORT double BVTMagImage_GetPixelRelativeBearing(BVTMagImage obj, int row, int col);

/** Return the minimum angle for the sonar's imaging field of view. 
 * The angle is returned in degrees.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTMagImage_GetFOVMinAngle(BVTMagImage obj);

/** Return the maximum angle for the sonar's imaging field of view. 
 * The angle is returned in degrees.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTMagImage_GetFOVMaxAngle(BVTMagImage obj);

/** Return the value of the pixel at (row, col)	
 * \param obj Object pointer
 * \param row Requested row 
 * \param col Requested col 
 */
BVTSDK_EXPORT unsigned short BVTMagImage_GetPixel(BVTMagImage obj, int row, int col);

/** Return a pointer to a row of pixels	
 * \param obj Object pointer
 * \param row Requested row 
 */
BVTSDK_EXPORT unsigned short* BVTMagImage_GetRow(BVTMagImage obj, int row);

/** Return a pointer to the entire image.
 * The image or organized in Row-Major order (just like C/C++).
 * \param obj Object pointer
 */
BVTSDK_EXPORT unsigned short* BVTMagImage_GetBits(BVTMagImage obj);

/** Copy the raw image data to the user specified buffer. See GetBits for more info.
 * \param obj Object pointer
 * \param data Pointer to a valid buffer 
 * \param len The size of the buffer pointed to by data in pixels NOT bytes. 
 */
BVTSDK_EXPORT RetVal BVTMagImage_CopyBits(BVTMagImage obj, unsigned short* data, unsigned int len);

/** Save the image in PGM (PortableGreyMap) format.
 * Note that few programs actually support loading a 16bit PGM.
 * \param obj Object pointer
 * \param file_name File name to save to 
 */
BVTSDK_EXPORT RetVal BVTMagImage_SavePGM(BVTMagImage obj, const char* file_name);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
