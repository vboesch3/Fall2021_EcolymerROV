/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTCOLORMAPPER_H__
#define __BVTCOLORMAPPER_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_magimage.h>
#include <bvt_c/bvt_colorimage.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	define BVTSDK_EXPORT
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTColorMapper BVTColorMapper Object
 * Provide support for applying a colormap to a MagImage, thus 
 * generating a ColorImage.
 * @{
*/

/** Opaque type for the BVTColorMapper object */
typedef void* BVTColorMapper;

/** Create a BVTColorMapper object */
BVTSDK_EXPORT BVTColorMapper BVTColorMapper_Create();
/** Destroy a BVTColorMapper object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTColorMapper_Destroy(BVTColorMapper obj);

/** Load a color map file
 * \param obj Object pointer
 * \param file Colormap file name 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_Load(BVTColorMapper obj, const char* file);

/** Set the gamma used when colormapping
 * \param obj Object pointer
 * \param gamma Gamma value 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_SetGamma(BVTColorMapper obj, float gamma);

/** Return the current gamma
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTColorMapper_GetGamma(BVTColorMapper obj);

/** Set the intensity values to be mapped to the top and bottom of the colormap. 
 * If auto intensity is enabled, this function returns an error.
 * \param obj Object pointer
 * \param top Top colormap threshold (aka intensity) 
 * \param bottom Bottom colormap threshold 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_SetThresholds(BVTColorMapper obj, int top, int bottom);

/** Return the upper threshold for the colormap.  The top threshold is also
 * known as 'intensity'.  Lowering the top threshold will make a brighter image.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTColorMapper_GetTopThreshold(BVTColorMapper obj);

/** Return the lower threshold for the colormap
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTColorMapper_GetBottomThreshold(BVTColorMapper obj);

/** Return a number greater than 0 if auto-threshold is enabled, 0 if it's not.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTColorMapper_GetAutoMode(BVTColorMapper obj);

/** Enable or disable an internal auto-threshold algorithm.
 * \param obj Object pointer
 * \param mode > 0 if auto-threshold should be enabled. 0 otherwise. 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_SetAutoMode(BVTColorMapper obj, int mode);

/** Colormap an image
 * \param obj Object pointer
 * \param input Input magnitude image 
 * \param output Output color image 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_MapImage(BVTColorMapper obj, const BVTMagImage input, BVTColorImage* output);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
