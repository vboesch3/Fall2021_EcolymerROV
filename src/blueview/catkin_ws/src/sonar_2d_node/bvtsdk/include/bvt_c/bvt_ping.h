/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTPING_H__
#define __BVTPING_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_magimage.h>
#include <bvt_c/bvt_rangedata.h>
#include <bvt_c/bvt_navdata.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	define BVTSDK_EXPORT
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTPing BVTPing Object
 * As its name implies, the Ping object represents the return from 
 * a single ping on a particular head. GetImage is the most important
 * function in Ping as it does whatever processing is necessary to
 * convert the ping to an image.  <br>
 * Each ping may have a video frame associated with it, and saved in
 * the same file. These images are typically from a video camera
 * mounted near the sonar, such as on a ROV. <br>
 * Each ping may also store navigation data to indicate the position
 * and orientation of the vehicle at the time of the ping. <br>
 * A ping is essentially a container for data. As such, after you get
 * a ping from the head and extract the data (or save it to a file),
 * it is necessary to destroy the ping object to free up memory.
 * In the future the Ping object will expose additional information
 * about the ping, such as the orientation of the head when it was
 * generated.
 * @{
*/

/** Opaque type for the BVTPing object */
typedef void* BVTPing;

/** Destroy a BVTPing object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTPing_Destroy(BVTPing obj);

/** Return the ping number.
 * Ping numbers only have meaning if the ping came from a file.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTPing_GetPingNumber(BVTPing obj);

/** Return the ping's timestamp in seconds since 00:00:00, January 1, 1970 
 * This is local time.
 * Pings are timestamped using a standard UNIX time stamp. This is 
 * a similar value to that returned by the time() C standard library 
 * function. In fact, the only difference is the addition of fractional seconds.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTPing_GetTimestamp(BVTPing obj);

/** Return the ping's timestamp's offset in seconds from UTC time.  Add this value to
 * that returned by GetTimestamp() to obtain UTC time.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTPing_GetTimeZoneOffset(BVTPing obj);

/** Set the ping's internal time stamp.  See GetTimestamp() for more information. 
 * Note: BlueView strongly recommends that users NOT directly set the time stamp as 
 * it is set internally when the ping is actually initiated.  If you are trying to 
 * synchronize two systems, it is far better to simply make sure that the system
 * clocks are synchronized, as the ping timestamp is created from the 
 * PC's internal clock. Network Time Protocol and GPS sources provide highly 
 * accurate ways to accomplish this.
 * \param obj Object pointer
 * \param sec Timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 */
BVTSDK_EXPORT RetVal BVTPing_SetTimestamp(BVTPing obj, double sec);

/** Retrieve an image of this ping, according to the parameters set
 * in the head used to get this ping. See Head and MagImage documentation
 * for more details.
 * \param obj Object pointer
 * \param img Output image 
 */
BVTSDK_EXPORT RetVal BVTPing_GetImage(BVTPing obj, BVTMagImage* img);

/** ** EXPERIMENTAL ** See RangeData class for more details, and the
 * Head's SetRangeDataThreshold function.
 * NOTE: This only applies to specialized BlueView sonars.
 * \param obj Object pointer
 * \param data set of ranges at angles for this ping 
 */
BVTSDK_EXPORT RetVal BVTPing_GetRangeData(BVTPing obj, BVTRangeData* data);

/** Get the pitch angle, in floating point degrees. Bow up is positive.
 * Some BlueView sonar have an internal tilt sensor that is capable of reporting
 * the pitch angle.  If the sonar doesn't have the sensor, this function
 * returns 0
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTPing_GetSonarPitchAngle(BVTPing obj);

/** Get the roll angle, in floating point degrees. Port side up is positive.
 * Some BlueView sonar have an internal tilt sensor that is capable of reporting
 * the roll angle.  If the sonar doesn't have the sensor, this function
 * returns 0.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTPing_GetSonarRollAngle(BVTPing obj);

/** Retrieves a copy of the navigation data stored with this ping. Note
 * that the data is copied out of the ping into the local NavData object,
 * a pointer to internal data is not returned. Thus, the NavData object
 * may be used after the Ping is destroyed.
 * \param obj Object pointer
 */
BVTSDK_EXPORT RetVal BVTPing_GetNavDataCopy(BVTPing obj, BVTNavData* nav_data);

/** Stores a copy of the navigation data with the other ping data, so the data
 * will be saved if the ping is saved to a file.
 * \param obj Object pointer
 */
BVTSDK_EXPORT RetVal BVTPing_PutNavData(BVTPing obj, const BVTNavData nav_data);

/** Video frame is raw RGB (RGBRGB...) 
 */
#define BVTPING_VIDEO_RGB	(int)(0)

/** Video frame is a JPEG image 
 */
#define BVTPING_VIDEO_JPEG	(int)(1)

/** Returns the video frame associated with this ping.
 * The video frame may be in any of the supported image formats.
 * Some image formats may already contain parameters such as height
 * and width (and more), but valid pointers must be passed in anyway.
 * The same pointer can be passed in for multiple parameters, if
 * those parameters will not be used. However, they are provided both
 * for formats which do not have embedded size information, and so that
 * the display window may be created and/or sized without parsing
 * the image data.<br>
 * NOTE: This function will return BVT_NO_VIDEO_FRAME if there
 * is no video frame stored for the ping. <br>
 * WARNING: The data buffer must NOT be accessed after the ping object is destroyed,
 * as the pointer will no longer point to valid data and will likely crash your application!
 * So copy off the data before destroying the Ping object. <br>
 * The single value pointers must be pointers to allocated data, not just
 * pointer types. For example:<br>
 * int height, width, length, type, retval;<br>
 * int * frame_ptr;<br>
 * retval = GetVideoFrame( frame_ptr, &height, &width, &length, &type );<br>
 * \param obj Object pointer
 * \param frame Pointer to a pointer to the image data to be returned 
 * \param height Pointer to return the uncompressed height of the image, in pixels 
 * \param width Pointer to return the uncompressed width of the image, in pixels 
 * \param length Pointer to return the actual size of the data buffer returned, in bytes, which may include additional metadata for some image types 
 * \param type pointer to return the type of image returned: FRAME_RGB or FRAME_JPEG 
 */
BVTSDK_EXPORT RetVal BVTPing_GetVideoFrame(BVTPing obj, unsigned char** frame, int* height, int* width, int* length, int* type);

/** Store a JPEG image to save with this ping.
 * Note that the height and width values will simply be stored and
 * available to read when the frame is retrieved. These have no effect
 * on the actual image size (the image will not be resized).
 * The length however is very important, as it determines how far from
 * the passed image pointer data will be read. An incorrect length could
 * result in an application crash.
 * \param obj Object pointer
 * \param frame Pointer to a single video frame
 * \param height Uncompressed height of the image, in pixels 
 * \param width Uncompressed width of the image, in pixels 
 * \param length Actual number of bytes being passed in 
 */
BVTSDK_EXPORT RetVal BVTPing_PutVideoFrameJPEG(BVTPing obj, const unsigned char* frame, int height, int width, int length);

/** ** Preliminary support - may change in later SDK versions ** <br>
 * Get orientation of the sonar head relative to the positioner.
 * Effectively the raw position data from a ROS pan/tilt unit.
 * \param obj Object pointer
 * \param X_axis_degrees rotation about X axis 
 * \param Y_axis_degrees rotation about Y axis 
 * \param Z_axis_degrees rotation about Z axis 
 */
BVTSDK_EXPORT RetVal BVTPing_GetPositionerOrientation(BVTPing obj, double* X_axis_degrees, double* Y_axis_degrees, double* Z_axis_degrees);

/** ** Preliminary support - may change in later SDK versions ** <br>
 * Set orientation of the sonar head relative to the positioner.
 * Effectively the raw position data from a ROS pan/tilt unit.
 * \param obj Object pointer
 * \param X_axis_degrees rotation about X axis 
 * \param Y_axis_degrees rotation about Y axis 
 * \param Z_axis_degrees rotation about Z axis 
 */
BVTSDK_EXPORT RetVal BVTPing_SetPositionerOrientation(BVTPing obj, double X_axis_degrees, double Y_axis_degrees, double Z_axis_degrees);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
