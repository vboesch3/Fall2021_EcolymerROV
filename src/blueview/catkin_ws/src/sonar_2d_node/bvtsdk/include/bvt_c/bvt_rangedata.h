/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTRANGEDATA_H__
#define __BVTRANGEDATA_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_colorimage.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	define BVTSDK_EXPORT
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTRangeData BVTRangeData Object
 * ** EXPERIMENTAL ** This functionality is still under development! ***
 * RangeData is a set of ranges from the sonar head, at various angles
 * from the sonar head. For each angle, the range, bearing and intensity
 * of the return beam at that range is stored.
 * NOTE: RangeData only applies to specialized BlueView sonars, and
 * has no use for our standard imaging sonars.
 * @{
*/

/** Opaque type for the BVTRangeData object */
typedef void* BVTRangeData;

/** Returns the number of range values stored for this ping.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTRangeData_GetCount(BVTRangeData obj);

/** Returns the resolution of the range values, in meters. 
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTRangeData_GetRangeResolution(BVTRangeData obj);

/** Returns the resolution of the bearing stored with each range value.
 * This is the difference in bearing between each range value in the array.
 * <br>
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTRangeData_GetBearingResolution(BVTRangeData obj);

/** Return the minimum angle for the sonar's imaging field of view.
 * In other words, this is the angle of the first range value, as all
 * angles are "left referenced."The angle is returned in degrees.
 * Note that this may not represent the actual physical field of view
 * of a particular sonar, but does represent the field of view of the
 * data being returned. Some outside values may have range values
 * indicating they are out of range.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTRangeData_GetFOVMinAngle(BVTRangeData obj);

/** Return the maximum angle for the sonar's imaging field of view.
 * In other words, this is the angle of the last range value, as all
 * angles are "left referenced."The angle is returned in degrees.
 * Note that this may not represent the actual physical field of view
 * of a particular sonar, but does represent the field of view of the
 * data being returned. Some outside values may have range values
 * indicating they are out of range.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTRangeData_GetFOVMaxAngle(BVTRangeData obj);

/** Values greater than this indicate no range could be measured. 
 */
#define BVTRANGEDATA_MAX_RANGE	(int)(999)

/** Copies the range values into the user specified buffer. The
 * buffer must hold the entire number of ranges (See GetCount() above),
 * or an error is returned.
 * \param obj Object pointer
 * \param ranges Pointer to a valid buffer of type float.
 * \param number_of_ranges Number of values the buffer can hold.
 */
BVTSDK_EXPORT RetVal BVTRangeData_CopyRangeValues(BVTRangeData obj, float* ranges, int number_of_ranges);

/** Returns the range from the sonar head, in meters, at a particular
 * index into the array. <br>
 * NOTE: Check all returned values for validity. If range > BVTRANGEDATA_MAX_RANGE
 * then the range could not be determined within the capabilities of the sonar. 
 * Meaning that the closest object at that bearing was either out of
 * view of the sonar, or the threshold was set too high to be detected.
 * \param obj Object pointer
 * \param index index into the array of RangeData values  
 */
BVTSDK_EXPORT float BVTRangeData_GetRangeValue(BVTRangeData obj, int index);

/** Returns the bearing from the center of the sonar head, in degrees (+/-),
 * at a particular index into the array.
 * \param obj Object pointer
 * \param index index into the array of RangeData values  
 */
BVTSDK_EXPORT float BVTRangeData_GetBearingValue(BVTRangeData obj, int index);

/** Returns the X coordinate for the pixel in the passed ColorImage, which
 * maps to the range and bearing at the index passed. This allows placing
 * of the range data on a colorimage, easing analysis of the algorithm
 * used for thresholding.
 * \param obj Object pointer
 * \param image ColorImage object where the pixel coordinate is needed 
 */
BVTSDK_EXPORT int BVTRangeData_GetColorImagePixelX(BVTRangeData obj, int rangeDataIndex, const BVTColorImage image);

/** Returns the Y coordinate for the pixel in the passed ColorImage which
 * maps to the range and bearing at the index passed. (see similar function,
 * above, for more details)
 * \param obj Object pointer
 * \param image ColorImage object where the pixel coordinate is needed 
 */
BVTSDK_EXPORT int BVTRangeData_GetColorImagePixelY(BVTRangeData obj, int rangeDataIndex, const BVTColorImage image);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
