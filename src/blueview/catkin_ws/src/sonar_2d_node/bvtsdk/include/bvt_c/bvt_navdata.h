/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTNAVDATA_H__
#define __BVTNAVDATA_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_navdata.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	define BVTSDK_EXPORT
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTNavData BVTNavData Object
 * NavData contains various types of user-accessible navigation parameter, which
 * can be saved to and retrieved from a sonar file on a per ping basis.
 * The NavData objects can be created and destroyed as needed. When the
 * ping functions are called to get or put the data, the data is copied.
 * This allows NavData objects to be pre-allocated and filled from various
 * instrument sources. It also allows the data to be copied from one
 * NavData object to the other.
 * NOTE: NavData changes will only be saved to a sonar of type FILE. 
 * @{
*/

/** Opaque type for the BVTNavData object */
typedef void* BVTNavData;

/** Create a BVTNavData object */
BVTSDK_EXPORT BVTNavData BVTNavData_Create();
/** Destroy a BVTNavData object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTNavData_Destroy(BVTNavData obj);

/** Clones the data from the passed NavData object to this object. Both objects
 * must have already been created.
 * \param obj Object pointer
 * \param navdata_to_clone existing NavData object to copy from 
 */
BVTSDK_EXPORT RetVal BVTNavData_Clone(BVTNavData obj, const BVTNavData navdata_to_clone);

/** Returns the latitude. If no latitude was stored, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees latitude in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetLatitude(BVTNavData obj, double* degrees);

/** Stores the latitude, as a signed floating point number of degrees.
 * Latitudes in the Western hemisphere are expressed as negative numbers.
 * \param obj Object pointer
 * \param degrees latitude in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetLatitude(BVTNavData obj, double degrees);

/** Returns the longitude. If no longitude was stored, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees longitude in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetLongitude(BVTNavData obj, double* degrees);

/** Stores the longitude, as a signed floating point number of degrees.
 * Longitudes in the Southern hemisphere are expressed as negative numbers.
 * \param obj Object pointer
 * \param degrees longitude in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetLongitude(BVTNavData obj, double degrees);

/** Returns the estimated horizontal error (see next function for details). 
 * If none was stored, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param error_meters potential error distance, in meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetHorizontalPrecisionError(BVTNavData obj, float* error_meters);

/** Stores the estimated possible horizontal error. This is primarily (but not exclusively)
 * intended for GPS systems, where there may be some doubt as to the
 * quality of the position fix. HDOP is common, but not used here, as
 * that is a unitless measure and varies between different manufacturers and models. <br>
 * The idea is to use whatever calculations are appropriate for the 
 * local navigation system, and store a possible error value in meters.
 * Some GPS units will attempt to give this directly. (for example,
 * the HPE field in the PGRME sentence, supplied by some Garmin units.)
 * In the case of large errors, or old data, it may be best to either
 * not store a position, or not store new data. (also consider using
 * the NavData time parameter to store the time of last fix, which
 * can then be compared to the ping time when the data is read back to
 * determine the age of the GPS reading.)
 * \param obj Object pointer
 * \param error_meters potential error distance, in meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHorizontalPrecisionError(BVTNavData obj, float error_meters);

/** Returns the height above mean sea level. If no value was stored for
 * this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param meters_above_geoid height in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeight(BVTNavData obj, float* meters_above_geoid);

/** Store the height above Mean Sea Level (usually the EGM96 geoid))
 * \param obj Object pointer
 * \param meters_above_geoid altitude in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHeight(BVTNavData obj, float meters_above_geoid);

/** Returns the estimated vertical error (see next function for details). 
 * If none was stored, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param error_meters potential error distance, in meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetVerticalPrecisionError(BVTNavData obj, float* error_meters);

/** Stores the estimated possible vertical error (height) above 
 * Mean Sea Level (EGM96 geoid).  For other notes, see the functions
 * or Horizontal Precision Error, above.
 * \param obj Object pointer
 * \param error_meters potential error distance, in meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetVerticalPrecisionError(BVTNavData obj, float error_meters);

/** Returns the depth. If no value was stored for this ping, returns
 * BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param meters_below_surface depth in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetDepth(BVTNavData obj, float* meters_below_surface);

/** Store the depth.
 * \param obj Object pointer
 * \param meters_below_surface depth in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetDepth(BVTNavData obj, float meters_below_surface);

/** Returns the altitude. If no value was stored for this ping, returns
 * BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param meters_above_bottom altitude in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetAltitude(BVTNavData obj, float* meters_above_bottom);

/** Store the altitude.
 * \param obj Object pointer
 * \param meters_above_bottom altitude in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAltitude(BVTNavData obj, float meters_above_bottom);

/** Returns the heading relative to True North. If no value was stored
 * for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees_true True heading, in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeading(BVTNavData obj, float* degrees_true);

/** Store the heading relative to True North.
 * \param obj Object pointer
 * \param degrees_true True heading, in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHeading(BVTNavData obj, float degrees_true);

/** Returns the velocity along the heading. If no value was stored
 * for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param meters_per_second velocity, in meters per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeadingVelocity(BVTNavData obj, float* meters_per_second);

/** Store the velocity along the heading.
 * \param obj Object pointer
 * \param meters_per_second velocity, in meters per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHeadingVelocity(BVTNavData obj, float meters_per_second);

/** Returns the course over ground (true). If no value was stored for
 * this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees_true course over ground, true, in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetCourseOverGround(BVTNavData obj, float* degrees_true);

/** Store the course over ground, true.
 * \param obj Object pointer
 * \param degrees_true course over ground, true, in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetCourseOverGround(BVTNavData obj, float degrees_true);

/** Returns the speed over ground. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param meters_per_second speed over ground, in meters per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetSpeedOverGround(BVTNavData obj, float* meters_per_second);

/** Store the speed over ground.
 * \param obj Object pointer
 * \param meters_per_second speed over ground, in meters per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetSpeedOverGround(BVTNavData obj, float meters_per_second);

/** Get the pitch angle. If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees_bow_up pitch angle, in floating point degrees, bow up is positive  
 */
BVTSDK_EXPORT RetVal BVTNavData_GetPitchAngle(BVTNavData obj, float* degrees_bow_up);

/** Store the pitch angle.
 * \param obj Object pointer
 * \param degrees_bow_up pitch angle, in floating point degrees, bow up is positive  
 */
BVTSDK_EXPORT RetVal BVTNavData_SetPitchAngle(BVTNavData obj, float degrees_bow_up);

/** Get the roll angle. If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees_port_up roll angle, in floating point degrees, port side up is positive  
 */
BVTSDK_EXPORT RetVal BVTNavData_GetRollAngle(BVTNavData obj, float* degrees_port_up);

/** Store the roll angle.
 * \param obj Object pointer
 * \param degrees_port_up roll angle, in floating point degrees, port side up is positive  
 */
BVTSDK_EXPORT RetVal BVTNavData_SetRollAngle(BVTNavData obj, float degrees_port_up);

/** Get the roll angle (but see notes with SetYawAngle() ). If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 */
BVTSDK_EXPORT RetVal BVTNavData_GetYawAngle(BVTNavData obj, float* degrees_bow_to_starboard);

/** Store the yaw angle. <br>
 * NOTE: This is NOT the same as the Heading field. Heading is for the
 * normal navigation use of Heading, often from a compass. This field is
 * intended to store raw data from other research instruments, in case
 * you need another storage spot. To keep everyone using the fields the
 * same way so that files can be interchanged, please use SetHeading
 * for the normal heading, and SetYawAngle() only for special uses.
 * \param obj Object pointer
 */
BVTSDK_EXPORT RetVal BVTNavData_SetYawAngle(BVTNavData obj, float degrees_bow_to_starboard);

/** Returns the rate of pitch change.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees_per_second rate of pitch change in degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetPitchRate(BVTNavData obj, float* degrees_per_second);

/** Store the the rate of pitch change.
 * \param obj Object pointer
 * \param degrees_per_second rate of pitch change in degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetPitchRate(BVTNavData obj, float degrees_per_second);

/** Returns the rate of roll change.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees_per_second rate of roll change in degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetRollRate(BVTNavData obj, float* degrees_per_second);

/** Store the the rate of change in roll.
 * \param obj Object pointer
 * \param degrees_per_second rate of roll change in floating point degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetRollRate(BVTNavData obj, float degrees_per_second);

/** Returns the rate of change in yaw (heading).  If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param degrees_per_second rate of yaw change in floating point degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetYawRate(BVTNavData obj, float* degrees_per_second);

/** Store the rate of change in yaw (heading).
 * \param obj Object pointer
 * \param degrees_per_second rate of yaw change in floating point degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetYawRate(BVTNavData obj, float degrees_per_second);

/** Gets the stored acceleration along the X axis. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param accel_mg acceleration along X axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationX(BVTNavData obj, float* accel_mg);

/** Sets the stored acceleration along the X axis. Intended to store
 * raw values of accelerometers.
 * \param obj Object pointer
 * \param accel_mg acceleration along X axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAccelerationX(BVTNavData obj, float accel_mg);

/** Gets the stored acceleration along the Y axis. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param accel_mg acceleration along Y axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationY(BVTNavData obj, float* accel_mg);

/** Sets the stored acceleration along the Y axis. Intended to store
 * raw values of accelerometers.
 * \param obj Object pointer
 * \param accel_mg acceleration along Y axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAccelerationY(BVTNavData obj, float accel_mg);

/** Gets the stored acceleration along the Z axis. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param accel_mg acceleration along Z axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationZ(BVTNavData obj, float* accel_mg);

/** Sets the stored acceleration along the Z axis. Intended to store
 * raw values of accelerometers.
 * \param obj Object pointer
 * \param accel_mg acceleration along Z axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAccelerationZ(BVTNavData obj, float accel_mg);

/** Returns the offset, to the north, from a user-defined fixed point.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param meters offset to the north, in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetNorth(BVTNavData obj, double* meters);

/** Store the offset from a user-defined fixed point.
 * \param obj Object pointer
 * \param meters offset to the north, in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetOffsetNorth(BVTNavData obj, double meters);

/** Returns the offset, to the east, from a user-defined fixed point.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param meters offset to the east, in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetEast(BVTNavData obj, double* meters);

/** Store the offset from a user-defined fixed point.
 * \param obj Object pointer
 * \param meters offset to the east, in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetOffsetEast(BVTNavData obj, double meters);

/** Gets a flag value which indicates if the East and North offset values
 * are from the stored Latitude and Longitude. (see more below...)
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * \param obj Object pointer
 * \param is_true either 1 or 0, to indicate true or false, respectively 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetIsFromLatLongFlag(BVTNavData obj, int* is_true);

/** Sets a flag to indicate if the East and North offset values are from
 * the stored Latitude and Longitude. If so, then software reading the
 * file will know to adjust appropriately. If from some special location,
 * perhaps the UserNavString could be used to indicate the reference
 * point? If nothing is stored, then the value is assumed to be false.
 * \param obj Object pointer
 * \param is_true either 1 or 0, to indicate true or false, respectively 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetOffsetIsFromLatLongFlag(BVTNavData obj, int is_true);

/** Returns the stored user string, in null-terminated form. If no
 * string was stored, returns a null string.
 * \param obj Object pointer
 */
BVTSDK_EXPORT char* BVTNavData_GetUserNavString(BVTNavData obj);

/** Stores a user-defined string related to navigation. It is highly
 * recommended to store some identifier such that the data is
 * recognizable as you own. <br>
 * Examples of possible uses might be to store locations based on 
 * coordinate systems other than GPS, indicating information about
 * the use of the north and east offset parameters, additional fields
 * from a GPS receiver, or any other information which might change
 * dynamically.
 * \param obj Object pointer
 * \param string_in string to be stored, null terminated, max length 80 chars 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetUserNavString(BVTNavData obj, const char* string_in);

/** Return the ping's timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 * Pings are timestamped using a standard UNIX time stamp. This is 
 * a similar value to that returned by the time() C standard library 
 * function. In fact, the only difference is the addition of fractional seconds.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTNavData_GetTimestamp(BVTNavData obj);

/** Set the NavData's internal time stamp.  See GetTimestamp() for more information. 
 * \param obj Object pointer
 * \param sec Timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetTimestamp(BVTNavData obj, double sec);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
