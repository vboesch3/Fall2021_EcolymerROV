/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTCOLORIMAGE_H__
#define __BVTCOLORIMAGE_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	define BVTSDK_EXPORT
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTColorImage BVTColorImage Object
 * Store a color image.  The API is nearly identical to MagImage.  The main difference is the 
 * pixel datatype. In ColorImage, each pixel is a single unsigned int. 
 * - Byte 0: Red Value
 * - Byte 1: Green Value
 * - Byte 2: Blue Value
 * - Byte 3: Alpha Value
 * @{
*/

/** Opaque type for the BVTColorImage object */
typedef void* BVTColorImage;

/** Destroy a BVTColorImage object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTColorImage_Destroy(BVTColorImage obj);

/** Return the height (in pixels) of this image
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTColorImage_GetHeight(BVTColorImage obj);

/** Return the width (in pixels) of this image
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTColorImage_GetWidth(BVTColorImage obj);

/** Return the range resolution of this image.
 * The resolution is returned in meters per pixel
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTColorImage_GetRangeResolution(BVTColorImage obj);

/** Retrieve the image row of the origin.
 * In most cases the origin will be outside of the image boundaries.  
 * The origin is the 'location' (in pixels) of the sonar head in image plane
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTColorImage_GetOriginRow(BVTColorImage obj);

/** Retrieve the image column of the origin.
 * In most cases the origin will be outside of the image boundaries.  
 * The origin is the 'location' (in pixels) of the sonar head in image plane
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTColorImage_GetOriginCol(BVTColorImage obj);

/** Retrieve the range (from the sonar head) of the specified pixel
 * \param obj Object pointer
 * \param row Origin row 
 * \param col Origin col 
 */
BVTSDK_EXPORT double BVTColorImage_GetPixelRange(BVTColorImage obj, int row, int col);

/** Retrieve the bearing relative to the sonar head of the specified pixel
 * \param obj Object pointer
 * \param row Origin row 
 * \param col Origin col 
 */
BVTSDK_EXPORT double BVTColorImage_GetPixelRelativeBearing(BVTColorImage obj, int row, int col);

/** Return the minimum angle for the sonar's imaging field of view. 
 * The angle is returned in degrees.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTColorImage_GetFOVMinAngle(BVTColorImage obj);

/** Return the maximum angle for the sonar's imaging field of view. 
 * The angle is returned in degrees.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTColorImage_GetFOVMaxAngle(BVTColorImage obj);

/** Return the value of the pixel at (row, col)	
 * \param obj Object pointer
 * \param row Requested row 
 * \param col Requested col 
 */
BVTSDK_EXPORT unsigned int BVTColorImage_GetPixel(BVTColorImage obj, int row, int col);

/** Return a pointer to a row of pixels	
 * \param obj Object pointer
 * \param row Requested row 
 */
BVTSDK_EXPORT unsigned int* BVTColorImage_GetRow(BVTColorImage obj, int row);

/** Return a pointer to the entire image.
 * The image or organized in Row-Major order (just like C/C++).
 * \param obj Object pointer
 */
BVTSDK_EXPORT unsigned int* BVTColorImage_GetBits(BVTColorImage obj);

/** Copy the raw image data to the user specified buffer. See GetBits for more info.
 * \param obj Object pointer
 * \param data Pointer to a valid buffer 
 * \param len The size of the buffer pointed to by data in pixels NOT bytes. 
 */
BVTSDK_EXPORT RetVal BVTColorImage_CopyBits(BVTColorImage obj, unsigned int* data, unsigned int len);

/** Save the image in PPM (PortablePixMap) format.
 * \param obj Object pointer
 * \param file_name File name to save to 
 */
BVTSDK_EXPORT RetVal BVTColorImage_SavePPM(BVTColorImage obj, const char* file_name);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
