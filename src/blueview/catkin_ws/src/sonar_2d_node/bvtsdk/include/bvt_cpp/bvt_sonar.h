/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __CPP_BVTSONAR_H__
#define __CPP_BVTSONAR_H__

#include <string>
#include <bvt_cpp/bvt_retval.h>
#include <bvt_cpp/bvt_sonar.h>
#include <bvt_cpp/bvt_head.h>

namespace BVTSDK
{

/** The Sonar object is the top level object in the SDK.  A sonar 
 * object embodies communication with a single physical sonar unit,
 * or file.  Each sonar contains several heads, which is where most
 * of the functionality is implemented.  Sonar also provides a
 * function to create new data files using BlueView's .son format.
 */
class Sonar
{
public:
	/// Create the object
	Sonar()
	{ m_ptr = BVTSonar_Create(); }

	/// Destroy the object
	~Sonar()
	{ BVTSonar_Destroy(m_ptr); }

#ifndef DOXY_IGNORE
	Sonar(BVTSonar ptr)
	{ m_ptr = ptr; }

	operator BVTSonar()
	{ return m_ptr; }
	operator BVTSonar*()
	{ return &m_ptr; }
	operator const BVTSonar() const
	{ return m_ptr; }
#endif

	/** Open the sonar type 'type' using the specified parameters.
	 * Allowed types (and parameters):
	 * - FILE <br>
	 * [filename] - Required <br>
	 * - NET <br>
	 * [host] - Connect to the specified host.<br>
	 * \param type The type of sonar to open	
	 * \param type_params Various type-specific parameters 
	 */
	RetVal Open(std::string type, std::string type_params)
	{
		return BVTSonar_Open( m_ptr, type.c_str(), type_params.c_str() );
	}

	/** Create a new data file.
	 * Files are always created by 'cloning' another Sonar
	 * object.  This ensures that the file receives all the
	 * needed setup/configuration data needed to process 
	 * images.
	 * \param file_name The filename of the file to be created 
	 * \param src The Sonar object to clone when creating the file 
	 * \param create_params Parameters for (reserved for future use) 
	 */
	RetVal CreateFile(std::string file_name, const Sonar& src, std::string create_params)
	{
		return BVTSonar_CreateFile( m_ptr, file_name.c_str(), src, create_params.c_str() );
	}

	/** Gets the size of a file created with CreateFile(). Only works with
	 * file type sonars. A networked sonar will return 0, as will a file
	 * type sonar if there is no open file associated with it.
	 * The return value must be multiplied by 1000 to get the actual
	 * file size in bytes.
	 */
	int GetFileSize()
	{
		return BVTSonar_GetFileSize( m_ptr );
	}

	/** Retrieve a Head object from the sonar
	 * \param head_num The head number to return 
	 * \param head The returned Head object 
	 */
	RetVal GetHead(int head_num, Head* head)
	{
		return BVTSonar_GetHead( m_ptr, head_num, *head );
	}

	/** Return the number of heads on this sonar.
	 */
	int GetHeadCount()
	{
		return BVTSonar_GetHeadCount( m_ptr );
	}

	/** Retrieves a copy of a short string with the model of the sonar.
	 * At the time of this writing, 20 characters would easily hold all of
	 * the sonar model names.
	 * \param buffer buffer to hold the null-terminated string to be passed back 
	 * \param buffer_size total number of characters the passed buffer can hold 
	 */
	RetVal GetSonarTypeAsString(char* buffer, int buffer_size)
	{
		return BVTSonar_GetSonarTypeAsString( m_ptr, buffer, buffer_size );
	}

	/** Retrieves a copy of the name of the sonar. The name is set only via
	 * the ProViewer application (at least at this time), or at the factory,
	 * and is separate from any BlueView model designations. <br>
	 * The length of the name could be considerably longer than the sonar type,
	 * and there is no actual limit, though 80 characters would seem to be
	 * more than enough.
	 * \param buffer buffer to hold the null-terminated string to be passed back 
	 * \param buffer_size total number of characters the passed buffer can hold 
	 */
	RetVal GetSonarName(char* buffer, int buffer_size)
	{
		return BVTSonar_GetSonarName( m_ptr, buffer, buffer_size );
	}

	/** Return the sonar's internal temperature in degrees Celsius
	 * If the sonar doesn't have a temp sensor this function returns
	 * absolute zero (-273.15)
	 */
	float GetTemperature()
	{
		return BVTSonar_GetTemperature( m_ptr );
	}


private:
	BVTSonar m_ptr;

	/// Prevent this object from being coppied
	Sonar(const Sonar&);
	Sonar&operator=(const Sonar&);
};
}

#endif
