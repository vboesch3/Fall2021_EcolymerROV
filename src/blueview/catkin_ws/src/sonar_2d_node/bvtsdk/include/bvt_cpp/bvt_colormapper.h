/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __CPP_BVTCOLORMAPPER_H__
#define __CPP_BVTCOLORMAPPER_H__

#include <string>
#include <bvt_cpp/bvt_retval.h>
#include <bvt_cpp/bvt_magimage.h>
#include <bvt_cpp/bvt_colorimage.h>

namespace BVTSDK
{

/** Provide support for applying a colormap to a MagImage, thus 
 * generating a ColorImage.
 */
class ColorMapper
{
public:
	/// Create the object
	ColorMapper()
	{ m_ptr = BVTColorMapper_Create(); }

	/// Destroy the object
	~ColorMapper()
	{ BVTColorMapper_Destroy(m_ptr); }

#ifndef DOXY_IGNORE
	ColorMapper(BVTColorMapper ptr)
	{ m_ptr = ptr; }

	operator BVTColorMapper()
	{ return m_ptr; }
	operator BVTColorMapper*()
	{ return &m_ptr; }
	operator const BVTColorMapper() const
	{ return m_ptr; }
#endif

	/** Load a color map file
	 * \param file Colormap file name 
	 */
	RetVal Load(std::string file)
	{
		return BVTColorMapper_Load( m_ptr, file.c_str() );
	}

	/** Set the gamma used when colormapping
	 * \param gamma Gamma value 
	 */
	RetVal SetGamma(float gamma)
	{
		return BVTColorMapper_SetGamma( m_ptr, gamma );
	}

	/** Return the current gamma
	 */
	float GetGamma()
	{
		return BVTColorMapper_GetGamma( m_ptr );
	}

	/** Set the intensity values to be mapped to the top and bottom of the colormap. 
	 * If auto intensity is enabled, this function returns an error.
	 * \param top Top colormap threshold (aka intensity) 
	 * \param bottom Bottom colormap threshold 
	 */
	RetVal SetThresholds(int top, int bottom)
	{
		return BVTColorMapper_SetThresholds( m_ptr, top, bottom );
	}

	/** Return the upper threshold for the colormap.  The top threshold is also
	 * known as 'intensity'.  Lowering the top threshold will make a brighter image.
	 */
	int GetTopThreshold()
	{
		return BVTColorMapper_GetTopThreshold( m_ptr );
	}

	/** Return the lower threshold for the colormap
	 */
	int GetBottomThreshold()
	{
		return BVTColorMapper_GetBottomThreshold( m_ptr );
	}

	/** Return a number greater than 0 if auto-threshold is enabled, 0 if it's not.
	 */
	int GetAutoMode()
	{
		return BVTColorMapper_GetAutoMode( m_ptr );
	}

	/** Enable or disable an internal auto-threshold algorithm.
	 * \param mode > 0 if auto-threshold should be enabled. 0 otherwise. 
	 */
	RetVal SetAutoMode(int mode)
	{
		return BVTColorMapper_SetAutoMode( m_ptr, mode );
	}

	/** Colormap an image
	 * \param input Input magnitude image 
	 * \param output Output color image 
	 */
	RetVal MapImage(const MagImage& input, ColorImage* output)
	{
		return BVTColorMapper_MapImage( m_ptr, input, *output );
	}


private:
	BVTColorMapper m_ptr;

	/// Prevent this object from being coppied
	ColorMapper(const ColorMapper&);
	ColorMapper&operator=(const ColorMapper&);
};
}

#endif
